version: '3.8'

services:
  kairos:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: kairos-app
    environment:
      - NODE_ENV=production
      - DATABASE_URL=file:/app/data/kairos.db
      - LOG_LEVEL=info
      - ENABLE_FILE_LOGGING=true
      - LOG_FILE_PATH=/app/logs/kairos.log
      # Cron Job Konfiguration für Produktion
      - SCHEDULING_TIMEZONE=Europe/Berlin
      - ENABLE_CRON_MONITORING=true
      - CRON_JOB_TIMEOUT=900000
      - ENABLE_CRON_NOTIFICATIONS=true
      - CRON_FAILURE_THRESHOLD=2
      # Produktions-optimierte Cron Zeitpläne
      - DATA_INGESTION_CRON=*/30 9-17 * * 1-5
      - TECHNICAL_ANALYSIS_CRON=5 * * * *
      - ML_TRAINING_CRON=0 2 * * 1-5
      - PREDICTION_VALIDATION_CRON=0 4 * * 1-5
      - DATA_CLEANUP_CRON=0 3 * * 6
      - DAILY_PREDICTION_CRON=30 6 * * 1-5
      - DATA_INTEGRITY_CRON=0 1 * * *
    env_file:
      - .env
    volumes:
      # Persistente Datenbank
      - kairos_data:/app/data
      # Persistente ML-Modelle
      - kairos_models:/app/models
      # Log-Dateien
      - kairos_logs:/app/logs
    networks:
      - kairos_network
    restart: unless-stopped
    # Für CLI-Anwendung: interaktiver Modus
    stdin_open: true
    tty: true

  # Entwicklungsversion mit Hot-Reload
  kairos-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: build
    container_name: kairos-dev
    environment:
      - NODE_ENV=development
      - DATABASE_URL=file:/app/data/kairos.db
      - LOG_LEVEL=debug
      # Entwicklungs-Cron Konfiguration (häufigere Ausführung)
      - SCHEDULING_TIMEZONE=Europe/Berlin
      - ENABLE_CRON_MONITORING=true
      - CRON_JOB_TIMEOUT=300000
      - ENABLE_CRON_NOTIFICATIONS=false
      - DATA_INGESTION_CRON=*/15 * * * *
      - TECHNICAL_ANALYSIS_CRON=0 * * * *
      - ML_TRAINING_CRON=0 2 * * *
      - PREDICTION_VALIDATION_CRON=0 3 * * *
      - DATA_CLEANUP_CRON=0 4 * * 0
      - DAILY_PREDICTION_CRON=0 6 * * *
      - DATA_INTEGRITY_CRON=0 1 * * *
    env_file:
      - .env
    volumes:
      # Source-Code für Hot-Reload
      - ./src:/app/src
      - ./prisma:/app/prisma
      - ./package*.json:/app/
      # Persistente Daten
      - kairos_data_dev:/app/data
      - kairos_models_dev:/app/models
      - kairos_logs_dev:/app/logs
    networks:
      - kairos_network
    command: npm run start:dev
    stdin_open: true
    tty: true
    profiles:
      - dev

  # Prisma Studio für Datenbankvisualisierung
  prisma-studio:
    build:
      context: .
      dockerfile: Dockerfile
      target: build
    container_name: kairos-prisma-studio
    environment:
      - DATABASE_URL=file:/app/data/kairos.db
    env_file:
      - .env
    volumes:
      - kairos_data_dev:/app/data
      - ./prisma:/app/prisma
    ports:
      - "5555:5555"
    networks:
      - kairos_network
    command: npx prisma studio --hostname 0.0.0.0
    profiles:
      - dev

volumes:
  # Produktions-Volumes
  kairos_data:
    driver: local
  kairos_models:
    driver: local
  kairos_logs:
    driver: local
    
  # Entwicklungs-Volumes
  kairos_data_dev:
    driver: local
  kairos_models_dev:
    driver: local
  kairos_logs_dev:
    driver: local

networks:
  kairos_network:
    driver: bridge
