version: '3.8'

# Base configuration for KAIROS - unified for all environments
# Usage: docker-compose -f docker-compose.yml -f docker-compose.${ENV}.yml up

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: kairos-postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-kairos}
      - POSTGRES_USER=${POSTGRES_USER:-kairos}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-kairos_password}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - '${POSTGRES_PORT:-5432}:5432'
    networks:
      - kairos_network
    restart: unless-stopped
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'pg_isready -U ${POSTGRES_USER:-kairos} -d ${POSTGRES_DB:-kairos}',
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  # ML Service
  ml-service:
    build:
      context: .
      dockerfile: Dockerfile.ml
      args:
        - PYTHON_VERSION=${PYTHON_VERSION:-3.11}
    container_name: kairos-ml-service
    environment:
      - ML_SERVICE_PORT=${ML_SERVICE_PORT:-8080}
      - MODEL_STORAGE_PATH=/app/models
      - PYTHONUNBUFFERED=1
      - LOG_LEVEL=${ML_LOG_LEVEL:-info}
    volumes:
      - ml_models:/app/models
      - ml_logs:/app/logs
    ports:
      - '${ML_SERVICE_PORT:-8080}:8080'
    networks:
      - kairos_network
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:8081/health']
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache (optional)
  redis:
    image: redis:7-alpine
    container_name: kairos-redis
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    ports:
      - '${REDIS_PORT:-6379}:6379'
    volumes:
      - redis_data:/data
    networks:
      - kairos_network
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 3
    profiles:
      - cache

  # Database Initialization Service
  db-init:
    build:
      context: .
      dockerfile: Dockerfile
      target: init
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-kairos}:${POSTGRES_PASSWORD:-kairos_password}@postgres:5432/${POSTGRES_DB:-kairos}
      - DEBUG=prisma:*
    volumes:
      - ./prisma:/app/prisma
    networks:
      - kairos_network
    entrypoint: []
    command: >
      sh -c "
        echo 'ðŸš€ Initializing database...' &&
        npx prisma db push &&
        echo 'âœ… Database initialized successfully!'
      "
    restart: 'no'
    profiles:
      - init

  # Main Application
  kairos:
    build:
      context: .
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-production}
      args:
        - NODE_VERSION=${NODE_VERSION:-18}
    container_name: kairos-app
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-kairos}:${POSTGRES_PASSWORD:-kairos_password}@postgres:5432/${POSTGRES_DB:-kairos}
      - ML_SERVICE_URL=http://ml-service:8080
      - REDIS_URL=redis://${REDIS_PASSWORD:+:${REDIS_PASSWORD}@}redis:6379
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - ENABLE_FILE_LOGGING=${ENABLE_FILE_LOGGING:-true}
      - LOG_FILE_PATH=/app/logs/kairos.log
      - SCHEDULING_TIMEZONE=${SCHEDULING_TIMEZONE:-Europe/Berlin}
      - ENABLE_CRON_MONITORING=${ENABLE_CRON_MONITORING:-true}
      - CRON_JOB_TIMEOUT=${CRON_JOB_TIMEOUT:-900000}
      - ENABLE_CRON_NOTIFICATIONS=${ENABLE_CRON_NOTIFICATIONS:-true}
      - CRON_FAILURE_THRESHOLD=${CRON_FAILURE_THRESHOLD:-2}
      - DATA_INGESTION_CRON=${DATA_INGESTION_CRON:-*/30 9-17 * * 1-5}
      - TECHNICAL_ANALYSIS_CRON=${TECHNICAL_ANALYSIS_CRON:-5 * * * *}
      - ML_TRAINING_CRON=${ML_TRAINING_CRON:-0 2 * * 1-5}
      - PREDICTION_VALIDATION_CRON=${PREDICTION_VALIDATION_CRON:-0 4 * * 1-5}
      - DATA_CLEANUP_CRON=${DATA_CLEANUP_CRON:-0 3 * * 6}
      - DAILY_PREDICTION_CRON=${DAILY_PREDICTION_CRON:-30 6 * * 1-5}
      - DATA_INTEGRITY_CRON=${DATA_INTEGRITY_CRON:-0 1 * * *}
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs
      - ./models:/app/models
      - ./data:/app/data
    ports:
      - '${APP_PORT:-3000}:3000'
    networks:
      - kairos_network
    depends_on:
      postgres:
        condition: service_healthy
      ml-service:
        condition: service_healthy
    restart: unless-stopped
    stdin_open: true
    tty: true
    healthcheck:
      test: ['CMD', 'node', '-e', 'process.exit(0)']
      interval: 30s
      timeout: 10s
      retries: 3

  # Prisma Studio (Development Tool)
  prisma-studio:
    build:
      context: .
      dockerfile: Dockerfile
      target: build
    container_name: kairos-prisma-studio
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-kairos}:${POSTGRES_PASSWORD:-kairos_password}@postgres:5432/${POSTGRES_DB:-kairos}
    env_file:
      - .env
    volumes:
      - ./prisma:/app/prisma
    ports:
      - '${PRISMA_STUDIO_PORT:-5555}:5555'
    networks:
      - kairos_network
    depends_on:
      postgres:
        condition: service_healthy
    command: npx prisma studio --hostname 0.0.0.0
    profiles:
      - dev

volumes:
  postgres_data:
    driver: local
  ml_models:
    driver: local
  ml_logs:
    driver: local
  redis_data:
    driver: local

networks:
  kairos_network:
    driver: bridge
