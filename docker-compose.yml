version: '3.8'

services:
  # PostgreSQL Datenbank Container
  postgres:
    image: postgres:15-alpine
    container_name: kairos-postgres
    environment:
      - POSTGRES_DB=kairos
      - POSTGRES_USER=kairos
      - POSTGRES_PASSWORD=kairos_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - kairos_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kairos -d kairos"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ML Models Service Container
  ml-service:
    build:
      context: .
      dockerfile: Dockerfile.ml
    container_name: kairos-ml-service
    environment:
      - ML_SERVICE_PORT=8080
      - MODEL_STORAGE_PATH=/app/models
      - PYTHONUNBUFFERED=1
    volumes:
      - ml_models:/app/models
      - ml_logs:/app/logs
    ports:
      - "8080:8080"
    networks:
      - kairos_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Hauptanwendung (Produktion)
  kairos:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: kairos-app
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://kairos:kairos_password@postgres:5432/kairos
      - ML_SERVICE_URL=http://ml-service:8080
      - LOG_LEVEL=info
      - ENABLE_FILE_LOGGING=true
      - LOG_FILE_PATH=/app/logs/kairos.log
      # Cron Job Konfiguration für Produktion
      - SCHEDULING_TIMEZONE=Europe/Berlin
      - ENABLE_CRON_MONITORING=true
      - CRON_JOB_TIMEOUT=900000
      - ENABLE_CRON_NOTIFICATIONS=true
      - CRON_FAILURE_THRESHOLD=2
      # Produktions-optimierte Cron Zeitpläne
      - DATA_INGESTION_CRON=*/30 9-17 * * 1-5
      - TECHNICAL_ANALYSIS_CRON=5 * * * *
      - ML_TRAINING_CRON=0 2 * * 1-5
      - PREDICTION_VALIDATION_CRON=0 4 * * 1-5
      - DATA_CLEANUP_CRON=0 3 * * 6
      - DAILY_PREDICTION_CRON=30 6 * * 1-5
      - DATA_INTEGRITY_CRON=0 1 * * *
    env_file:
      - .env
    volumes:
      # Log-Dateien
      - app_logs:/app/logs
    networks:
      - kairos_network
    depends_on:
      postgres:
        condition: service_healthy
      ml-service:
        condition: service_healthy
    restart: unless-stopped
    # Für CLI-Anwendung: interaktiver Modus
    stdin_open: true
    tty: true

  # Entwicklungsversion mit Hot-Reload
  kairos-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: build
    container_name: kairos-dev
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://kairos:kairos_password@postgres:5432/kairos
      - ML_SERVICE_URL=http://ml-service:8080
      - LOG_LEVEL=debug
      # Entwicklungs-Cron Konfiguration (häufigere Ausführung)
      - SCHEDULING_TIMEZONE=Europe/Berlin
      - ENABLE_CRON_MONITORING=true
      - CRON_JOB_TIMEOUT=300000
      - ENABLE_CRON_NOTIFICATIONS=false
      - DATA_INGESTION_CRON=*/15 * * * *
      - TECHNICAL_ANALYSIS_CRON=0 * * * *
      - ML_TRAINING_CRON=0 2 * * *
      - PREDICTION_VALIDATION_CRON=0 3 * * *
      - DATA_CLEANUP_CRON=0 4 * * 0
      - DAILY_PREDICTION_CRON=0 6 * * *
      - DATA_INTEGRITY_CRON=0 1 * * *
    env_file:
      - .env
    volumes:
      # Source-Code für Hot-Reload
      - ./src:/app/src
      - ./prisma:/app/prisma
      - ./package*.json:/app/
      # Log-Dateien
      - app_logs_dev:/app/logs
    networks:
      - kairos_network
    depends_on:
      postgres:
        condition: service_healthy
      ml-service:
        condition: service_healthy
    command: npm run start:dev
    stdin_open: true
    tty: true
    profiles:
      - dev

  # Prisma Studio für Datenbankvisualisierung
  prisma-studio:
    build:
      context: .
      dockerfile: Dockerfile
      target: build
    container_name: kairos-prisma-studio
    environment:
      - DATABASE_URL=postgresql://kairos:kairos_password@postgres:5432/kairos
    env_file:
      - .env
    volumes:
      - ./prisma:/app/prisma
    ports:
      - "5555:5555"
    networks:
      - kairos_network
    depends_on:
      postgres:
        condition: service_healthy
    command: npx prisma studio --hostname 0.0.0.0
    profiles:
      - dev

  # Redis für Caching (optional)
  redis:
    image: redis:7-alpine
    container_name: kairos-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - kairos_network
    restart: unless-stopped
    profiles:
      - cache

volumes:
  # Datenbank-Volume
  postgres_data:
    driver: local
  
  # ML-Models Volume
  ml_models:
    driver: local
  
  # Log-Volumes
  app_logs:
    driver: local
  app_logs_dev:
    driver: local
  ml_logs:
    driver: local
    
  # Redis-Volume
  redis_data:
    driver: local

networks:
  kairos_network:
    driver: bridge
